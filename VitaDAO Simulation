package marketing;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.Stack;
import java.util.Timer;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.awt.Color;
import java.awt.Font;
import com.anylogic.engine.connectivity.ResultSet;
import com.anylogic.engine.connectivity.Statement;
import com.anylogic.engine.elements.*;
import com.anylogic.engine.markup.Network;
import com.anylogic.engine.Position;
import com.anylogic.engine.markup.PedFlowStatistics;
import com.anylogic.engine.markup.DensityMap;


import static java.lang.Math.*;
import static com.anylogic.engine.UtilitiesArray.*;
import static com.anylogic.engine.UtilitiesCollection.*;
import static com.anylogic.engine.presentation.UtilitiesColor.*;
import static com.anylogic.engine.HyperArray.*;

import com.anylogic.engine.*;
import com.anylogic.engine.analysis.*;
import com.anylogic.engine.connectivity.*;
import com.anylogic.engine.database.*;
import com.anylogic.engine.gis.*;
import com.anylogic.engine.markup.*;
import com.anylogic.engine.routing.*;
import com.anylogic.engine.presentation.*;
import com.anylogic.engine.gui.*;

import com.anylogic.libraries.modules.markup_descriptors.*;

import java.awt.geom.Arc2D;

public class Main extends Agent
{
  // Parameters

  public 
int  MaxWaitingTime;

  /**
   * Returns default value for parameter <code>MaxWaitingTime</code>.
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  public int _MaxWaitingTime_DefaultValue_xjal() {
    final Main self = this;
    return 
7 
;
  }

  public void set_MaxWaitingTime( int value ) {
    if (value == this.MaxWaitingTime) {
      return;
    }
    int _oldValue_xjal = this.MaxWaitingTime;
    this.MaxWaitingTime = value;
    onChange_MaxWaitingTime_xjal( _oldValue_xjal );
    onChange();
  }

  /**
   * Calls "On change" action for parameter MaxWaitingTime.<br>
   * Note that 'oldValue' in that action will be unavailable if this method is called by user
   * (current parameter value will be passed as 'oldValue').<br>
   * Please call <code>set_MaxWaitingTime()</code> method instead.
   */
  protected void onChange_MaxWaitingTime() {
    onChange_MaxWaitingTime_xjal( MaxWaitingTime );
  }

  @AnyLogicInternalCodegenAPI
  protected void onChange_MaxWaitingTime_xjal( int oldValue ) {  
  }


  public 
double  MaxDeliveryTime;

  /**
   * Returns default value for parameter <code>MaxDeliveryTime</code>.
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  public double _MaxDeliveryTime_DefaultValue_xjal() {
    final Main self = this;
    return 
25 
;
  }

  public void set_MaxDeliveryTime( double value ) {
    if (value == this.MaxDeliveryTime) {
      return;
    }
    double _oldValue_xjal = this.MaxDeliveryTime;
    this.MaxDeliveryTime = value;
    onChange_MaxDeliveryTime_xjal( _oldValue_xjal );
    onChange();
  }

  /**
   * Calls "On change" action for parameter MaxDeliveryTime.<br>
   * Note that 'oldValue' in that action will be unavailable if this method is called by user
   * (current parameter value will be passed as 'oldValue').<br>
   * Please call <code>set_MaxDeliveryTime()</code> method instead.
   */
  protected void onChange_MaxDeliveryTime() {
    onChange_MaxDeliveryTime_xjal( MaxDeliveryTime );
  }

  @AnyLogicInternalCodegenAPI
  protected void onChange_MaxDeliveryTime_xjal( double oldValue ) {  
  }


  @Override
  public void setParametersToDefaultValues() {
    super.setParametersToDefaultValues();
    MaxWaitingTime = _MaxWaitingTime_DefaultValue_xjal();
    MaxDeliveryTime = _MaxDeliveryTime_DefaultValue_xjal();
  }

  @Override
  public boolean setParameter(String _name_xjal, Object _value_xjal, boolean _callOnChange_xjal) {
    switch ( _name_xjal ) {
    case "MaxWaitingTime":
      if ( _callOnChange_xjal ) {
        set_MaxWaitingTime( ((Number) _value_xjal).intValue() );
      } else {
        MaxWaitingTime = ((Number) _value_xjal).intValue();
      }
      return true;
    case "MaxDeliveryTime":
      if ( _callOnChange_xjal ) {
        set_MaxDeliveryTime( ((Number) _value_xjal).doubleValue() );
      } else {
        MaxDeliveryTime = ((Number) _value_xjal).doubleValue();
      }
      return true;
    default:
      return super.setParameter( _name_xjal, _value_xjal, _callOnChange_xjal );
    }
  }

  @Override
  public <T> T getParameter(String _name_xjal) {
    Object _result_xjal;
    switch ( _name_xjal ) {
    case "MaxWaitingTime": _result_xjal = MaxWaitingTime; break;
    case "MaxDeliveryTime": _result_xjal = MaxDeliveryTime; break;
    default: _result_xjal = super.getParameter( _name_xjal ); break;
    }
    return (T) _result_xjal;
  }

  @AnyLogicInternalCodegenAPI
  private static String[] _parameterNames_xjal;

  @Override
  public String[] getParameterNames() {
    String[] result = _parameterNames_xjal;
    if (result == null) {
      List<String> list = new ArrayList<>( Arrays.asList( super.getParameterNames() ) );
      list.add( "MaxWaitingTime" );
      list.add( "MaxDeliveryTime" );
      result = list.toArray( new String[ list.size() ] );
      _parameterNames_xjal = result;
    }
    return result;
  }
  @AnyLogicInternalCodegenAPI
  private static Map<String, IElementDescriptor> elementDesciptors_xjal = createElementDescriptors( Main.class );
  
  @AnyLogicInternalCodegenAPI
  @Override
  public Map<String, IElementDescriptor> getElementDesciptors() {
    return elementDesciptors_xjal;
  }
  @AnyLogicCustomProposalPriority(type = AnyLogicCustomProposalPriority.Type.STATIC_ELEMENT)
  public static final Scale scale = new Scale( 10.0 );

  @Override
  public Scale getScale() {
    return scale;
  }


  // Events
	
  @AnyLogicInternalCodegenAPI
  public EventTimeout _chart_autoUpdateEvent_xjal = new EventTimeout(this);	
  @AnyLogicInternalCodegenAPI
  public EventTimeout _chart1_autoUpdateEvent_xjal = new EventTimeout(this);

  @Override
  @AnyLogicInternalCodegenAPI
  public String getNameOf( EventTimeout _e ) {
     if( _e == _chart_autoUpdateEvent_xjal ) return "chart auto update event";
     if( _e == _chart1_autoUpdateEvent_xjal ) return "chart1 auto update event";
    return super.getNameOf( _e );
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public EventTimeout.Mode getModeOf( EventTimeout _e ) {
    if ( _e == _chart_autoUpdateEvent_xjal ) return EVENT_TIMEOUT_MODE_CYCLIC;
    if ( _e == _chart1_autoUpdateEvent_xjal ) return EVENT_TIMEOUT_MODE_CYCLIC;
    return super.getModeOf( _e );
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public double getFirstOccurrenceTime( EventTimeout _e ) {
    double _t;
    if ( _e == _chart_autoUpdateEvent_xjal ) {
      _t = 
0 
;
      _t = toModelTime( _t, DAY );
      return _t;
    }
    if ( _e == _chart1_autoUpdateEvent_xjal ) {
      _t = 
0 
;
      _t = toModelTime( _t, DAY );
      return _t;
    }
    return super.getFirstOccurrenceTime( _e );
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public double evaluateTimeoutOf( EventTimeout _e ) {
    double _t;
    if( _e == _chart_autoUpdateEvent_xjal) {
      _t = 
1 
;
      _t = toModelTime( _t, DAY );
      return _t;
    }
    if( _e == _chart1_autoUpdateEvent_xjal) {
      _t = 
1 
;
      _t = toModelTime( _t, DAY );
      return _t;
    }
    return super.evaluateTimeoutOf( _e );
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public void executeActionOf( EventTimeout _e ) {
    if ( _e == _chart_autoUpdateEvent_xjal ) {
      chart.updateData();
      return;
    }
    if ( _e == _chart1_autoUpdateEvent_xjal ) {
      chart1.updateData();
      return;
    }
    super.executeActionOf( _e );
  }

	

  /** Internal constant, shouldn't be accessed by user */
  @AnyLogicInternalCodegenAPI
  protected static final int _STATECHART_COUNT_xjal = 0;


  // Embedded Objects

  @AnyLogicInternalCodegenAPI
  private static final AgentAnimationSettings _voters_animationSettings_xjal = new AgentAnimationSettings(1000L, 1000000000L);

  public String getNameOf( Agent ao ) {
    return super.getNameOf( ao );
  }

  public AgentAnimationSettings getAnimationSettingsOf( Agent ao ) {
    return super.getAnimationSettingsOf( ao );
  }

  public class _voters_Population extends AgentArrayList<DAOVoter> {
    _voters_Population( Agent owner ) {
      super( owner );
    }

    @AnyLogicInternalCodegenAPI
    public DAOVoter instantiateAgent( int index ) {
    	return instantiate_voters_xjal( index );
    }

    @AnyLogicInternalCodegenAPI
    public void callSetupParameters( DAOVoter agent, int index, TableInput tableInput ) {
      setupParameters_voters_xjal( agent, index, tableInput );
    }

    @AnyLogicInternalCodegenAPI
    public void callCreate( DAOVoter agent, int index, TableInput tableInput ) {
      doBeforeCreate_voters_xjal( agent, index, tableInput );
      agent.create();
    }

    @AnyLogicInternalCodegenAPI
    public boolean isPresentationEnabled() {
      return true;
    }


    public int NNotVoted() {
      return _voters_NNotVoted_xjal();
    }

    public int NUndecided() {
      return _voters_NUndecided_xjal();
    }

    public int NVotedYes() {
      return _voters_NVotedYes_xjal();
    }

    public int NVotedNo() {
      return _voters_NVotedNo_xjal();
    }

    public int NMember() {
      return _voters_NMember_xjal();
    }
  }
  
  @AnyLogicCustomProposalType(value = AnyLogicCustomProposalType.Label.POPULATION, customText = "DAOVoter")
  public _voters_Population voters = new _voters_Population( this );

  public String getNameOf( AgentList<?> aolist ) {
    if( aolist == voters ) return "voters";
    return super.getNameOf( aolist );
  }
  
  public AgentAnimationSettings getAnimationSettingsOf( AgentList<?> aolist ) {
    if( aolist == voters ) return _voters_animationSettings_xjal;
    return super.getAnimationSettingsOf( aolist );
  }

  /**
   * Returns the agent element at the specified position in voters
   * population.
   * @see com.anylogic.engine.AgentList#get(int)
   * @since 7.3.7
   */
  public DAOVoter voters(int index) {
    return voters.get( index );
  }

  /**
   * This method creates and adds new embedded object in the replicated embedded object collection voters<br>
   * @return newly created embedded object
   */
  public DAOVoter add_voters() {
    int index = voters.size();
    DAOVoter _result_xjal = instantiate_voters_xjal( index );
    voters.callSetupParameters( _result_xjal, index );
    voters.callCreate( _result_xjal, index );
    _result_xjal.start();
    return _result_xjal;
  }

  /**
   * This method creates and adds new embedded object in the replicated embedded object collection voters<br>
   * This method uses given parameter values to setup created embedded object<br>
   * Index of this new embedded object instance can be obtained through calling <code>voters.size()</code> method <strong>before</strong> this method is called
   * @param ProposalEffectiveness
   * @param ContactRateMember
   * @param TechnicalAbility
   * @param Decision
   * @param DecisionLowToken
   * @param Tokens
   * @param IdealProposalTime
   * @param ProposalTime
   * @return newly created embedded object
   */
  public DAOVoter add_voters( double ProposalEffectiveness, double ContactRateMember, double TechnicalAbility, double Decision, double DecisionLowToken, double Tokens, double IdealProposalTime, double ProposalTime ) {
    int index = voters.size();
    DAOVoter _result_xjal = instantiate_voters_xjal( index );
    // Setup parameters
    _result_xjal.markParametersAreSet();
    _result_xjal.ProposalEffectiveness = ProposalEffectiveness;
    _result_xjal.ContactRateMember = ContactRateMember;
    _result_xjal.TechnicalAbility = TechnicalAbility;
    _result_xjal.Decision = Decision;
    _result_xjal.DecisionLowToken = DecisionLowToken;
    _result_xjal.Tokens = Tokens;
    _result_xjal.IdealProposalTime = IdealProposalTime;
    _result_xjal.ProposalTime = ProposalTime;
    // Finish embedded object creation
    voters.callCreate( _result_xjal, index );
    _result_xjal.start();
    return _result_xjal;
  }

  /**
   * This method removes the given embedded object from the replicated embedded object collection voters<br>
   * The given object is destroyed, but not immediately in common case.
   * @param object the active object - element of replicated embedded object voters - which should be removed
   * @return <code>true</code> if object was removed successfully, <code>false</code> if it doesn't belong to voters
   */
  public boolean remove_voters( DAOVoter object ) {
    if( ! voters._remove( object ) ) {
      return false;
    }
    object.removeFromFlowchart();
    object.setDestroyed();
    return true;
  }

  /**
   * Creates an embedded object instance and adds it to the end of replicated embedded object list<br>
   * <i>This method should not be called by user</i>
   */
  protected DAOVoter instantiate_voters_xjal( final int index ) {
    DAOVoter _result_xjal = new DAOVoter( getEngine(), this, voters );
    
    voters._add( _result_xjal );

    return _result_xjal;
  }

  /**
   * Setups parameters of an embedded object instance<br>
   * This method should not be called by user
   */
  private void setupParameters_voters_xjal( final DAOVoter self, final int index, TableInput _t ) {
    self.ProposalEffectiveness = 
0.01 
;
    self.ContactRateMember = self._ContactRateMember_DefaultValue_xjal();
    self.TechnicalAbility = self._TechnicalAbility_DefaultValue_xjal();
    self.Decision = self._Decision_DefaultValue_xjal();
    self.DecisionLowToken = self._DecisionLowToken_DefaultValue_xjal();
    self.Tokens = self._Tokens_DefaultValue_xjal();
    self.IdealProposalTime = self._IdealProposalTime_DefaultValue_xjal();
    self.ProposalTime = self._ProposalTime_DefaultValue_xjal();
  }

  /**
   * Setups an embedded object instance<br>
   * This method should not be called by user
   */
  @AnyLogicInternalCodegenAPI
  private void doBeforeCreate_voters_xjal( DAOVoter self, final int index, TableInput _t ) {
    self.setEnvironment( this );

    // Port connections
  }

  /**
   * <i>This method should not be called by user</i>
   */
  private int _voters_NNotVoted_xjal() {
    int _value = 0;
    for ( DAOVoter item : voters ) {
      boolean _t = 
 item.inState(DAOVoter.NotVoted) 
;
      if ( _t ) {
        _value++;
      }
    }
    return _value;
  }
  /**
   * <i>This method should not be called by user</i>
   */
  private int _voters_NUndecided_xjal() {
    int _value = 0;
    for ( DAOVoter item : voters ) {
      boolean _t = 
 item.inState(DAOVoter.Undecided) 
;
      if ( _t ) {
        _value++;
      }
    }
    return _value;
  }
  /**
   * <i>This method should not be called by user</i>
   */
  private int _voters_NVotedYes_xjal() {
    int _value = 0;
    for ( DAOVoter item : voters ) {
      boolean _t = 
 item.inState(DAOVoter.VotedY) 
;
      if ( _t ) {
        _value++;
      }
    }
    return _value;
  }
  /**
   * <i>This method should not be called by user</i>
   */
  private int _voters_NVotedNo_xjal() {
    int _value = 0;
    for ( DAOVoter item : voters ) {
      boolean _t = 
item.inState(DAOVoter.VotedN) 
;
      if ( _t ) {
        _value++;
      }
    }
    return _value;
  }
  /**
   * <i>This method should not be called by user</i>
   */
  private int _voters_NMember_xjal() {
    int _value = 0;
    for ( DAOVoter item : voters ) {
      boolean _t = 
item.inState(DAOVoter.Member) 
;
      if ( _t ) {
        _value++;
      }
    }
    return _value;
  }
  @AnyLogicInternalCodegenAPI
  public DataSet _chart_expression0_dataSet_xjal = new DataSet( 365, new DataUpdater_xjal() {
    double _lastUpdateX = Double.NaN;
    @Override
    public void update( DataSet _d ) {
      if ( time() == _lastUpdateX ) { return; }
      _d.add( time(), __chart_expression0_dataSet_xjal_YValue() );
      _lastUpdateX = time();
    }
  } );
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double __chart_expression0_dataSet_xjal_YValue() {
    return 
voters.NVotedYes() 
;
  }

  @AnyLogicInternalCodegenAPI
  public DataSet _chart_expression1_dataSet_xjal = new DataSet( 365, new DataUpdater_xjal() {
    double _lastUpdateX = Double.NaN;
    @Override
    public void update( DataSet _d ) {
      if ( time() == _lastUpdateX ) { return; }
      _d.add( time(), __chart_expression1_dataSet_xjal_YValue() );
      _lastUpdateX = time();
    }
  } );
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double __chart_expression1_dataSet_xjal_YValue() {
    return 
voters.NUndecided() 
;
  }

  @AnyLogicInternalCodegenAPI
  public DataSet _chart_expression2_dataSet_xjal = new DataSet( 365, new DataUpdater_xjal() {
    double _lastUpdateX = Double.NaN;
    @Override
    public void update( DataSet _d ) {
      if ( time() == _lastUpdateX ) { return; }
      _d.add( time(), __chart_expression2_dataSet_xjal_YValue() );
      _lastUpdateX = time();
    }
  } );
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double __chart_expression2_dataSet_xjal_YValue() {
    return 
voters.NNotVoted() 
;
  }

  @AnyLogicInternalCodegenAPI
  public DataSet _chart_expression3_dataSet_xjal = new DataSet( 365, new DataUpdater_xjal() {
    double _lastUpdateX = Double.NaN;
    @Override
    public void update( DataSet _d ) {
      if ( time() == _lastUpdateX ) { return; }
      _d.add( time(), __chart_expression3_dataSet_xjal_YValue() );
      _lastUpdateX = time();
    }
  } );
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double __chart_expression3_dataSet_xjal_YValue() {
    return 
voters.NVotedNo() 
;
  }

  @AnyLogicInternalCodegenAPI
  public DataSet _chart_expression4_dataSet_xjal = new DataSet( 365, new DataUpdater_xjal() {
    double _lastUpdateX = Double.NaN;
    @Override
    public void update( DataSet _d ) {
      if ( time() == _lastUpdateX ) { return; }
      _d.add( time(), __chart_expression4_dataSet_xjal_YValue() );
      _lastUpdateX = time();
    }
  } );
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double __chart_expression4_dataSet_xjal_YValue() {
    return 
voters.NMember() 
;
  }

  // View areas
  public ViewArea _origin_VA = new ViewArea( this, "[Origin]", 0, 0, 1000.0, 600.0 );
  @Override
  @AnyLogicInternalCodegenAPI
  public int getViewAreas(Map<String, ViewArea> _output) {
    if ( _output != null ) {
      _output.put( "_origin_VA", this._origin_VA );
    }
    return 1 + super.getViewAreas( _output );
  }
  @AnyLogicInternalCodegenAPI
  protected static final int _chart = 1;
  @AnyLogicInternalCodegenAPI
  protected static final int _chart1 = 2;
  @AnyLogicInternalCodegenAPI
  protected static final int _voters_presentation = 3;

  /** Internal constant, shouldn't be accessed by user */
  @AnyLogicInternalCodegenAPI
  protected static final int _SHAPE_NEXT_ID_xjal = 4;

  @AnyLogicInternalCodegenAPI
  public boolean isPublicPresentationDefined() {
    return true;
  }

  @AnyLogicInternalCodegenAPI
  public boolean isEmbeddedAgentPresentationVisible( Agent _a ) {
    return super.isEmbeddedAgentPresentationVisible( _a );
  }
  @AnyLogicInternalCodegenAPI
  private void _initialize_level_xjal() {
	  level.addAll(chart, chart1);
  }

  
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double _chart1_DataItem0Value() {
    return 
voters.NVotedNo() 
;
  }
  
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double _chart1_DataItem1Value() {
    return 
voters.NUndecided() 
;
  }
  
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double _chart1_DataItem2Value() {
    return 
voters.NVotedYes() 
;
  }
  
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double _chart1_DataItem3Value() {
    return 
voters.NNotVoted() 
;
  }
  
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  private double _chart1_DataItem4Value() {
    return 
voters.NMember() 
;
  }
  protected TimeStackChart chart;
  protected PieChart chart1;
  
  /**
   * <i>This method should not be called by user</i>
   */
  @AnyLogicInternalCodegenAPI
  protected ShapeEmbeddedObjectPresentation _voters_presentation_createShapeWithStaticProperties_xjal( final Agent _a, final int _index ) {
    ShapeEmbeddedObjectPresentation shape = new ShapeEmbeddedObjectPresentation( Main.this, SHAPE_DRAW_2D3D, true, 110.0, 260.0, 0.0, 0.0,
		false, true, _a );

    return shape;
  }

  protected ShapeAgentPopulationGroup voters_presentation;
  protected com.anylogic.engine.markup.Level level;

  private com.anylogic.engine.markup.Level[] _getLevels_xjal;

  @Override
  public com.anylogic.engine.markup.Level[] getLevels() {
    return _getLevels_xjal;
  }

  @AnyLogicInternalCodegenAPI
  private void _createPersistentElementsBP0_xjal() {
  }

  @AnyLogicInternalCodegenAPI
  private void _createPersistentElementsAP0_xjal() {
    {
    DataSet _item;
    List<DataSet> _items = new ArrayList<DataSet>( 5 );
    _items.add( _chart_expression0_dataSet_xjal ); 
    _items.add( _chart_expression1_dataSet_xjal ); 
    _items.add( _chart_expression2_dataSet_xjal ); 
    _items.add( _chart_expression3_dataSet_xjal ); 
    _items.add( _chart_expression4_dataSet_xjal ); 
    List<String> _titles = new ArrayList<String>( 5 );
    _titles.add( "Voted Yes" );
    _titles.add( "Deciding to Vote" );
    _titles.add( "NotVoted" );
    _titles.add( "Voted No" );
    _titles.add( "Member" );
    List<Color> _colors = new ArrayList<Color>( 5 );
    _colors.add( green );
    _colors.add( gold );
    _colors.add( silver );
    _colors.add( red );
    _colors.add( lavender );
    chart = new TimeStackChart(
		    Main.this, true, 460.0, -20.0, 
			460.0, 290.0,
            null, null,
            50.0, 30.0,
			380.0, 200.0, white, black, black,
            30.0, Chart.SOUTH,
            
1 
             * month(), Chart.WINDOW_MOVES_WITH_TIME, null, Chart.SCALE_FIXED
            , 
100 
            , Chart.GRID_DEFAULT, Chart.GRID_DEFAULT,
            darkGray, darkGray, _items, _titles, _colors );

    }
    {
    List<DataItem> _items = new ArrayList<DataItem>( 5 );
    _items.add( new DataItem() {
      @Override
      public void update() {
        setValue( _chart1_DataItem0Value() );
      }
    });
    _items.add( new DataItem() {
      @Override
      public void update() {
        setValue( _chart1_DataItem1Value() );
      }
    });
    _items.add( new DataItem() {
      @Override
      public void update() {
        setValue( _chart1_DataItem2Value() );
      }
    });
    _items.add( new DataItem() {
      @Override
      public void update() {
        setValue( _chart1_DataItem3Value() );
      }
    });
    _items.add( new DataItem() {
      @Override
      public void update() {
        setValue( _chart1_DataItem4Value() );
      }
    });
    List<String> _titles = new ArrayList<String>( 5 );
    _titles.add( "Voted No" );
    _titles.add( "Undecided" );
    _titles.add( "Voted Yes" );
    _titles.add( "Not Voted" );
    _titles.add( "Member" );
    List<Color> _colors = new ArrayList<Color>( 5 );
    _colors.add( red );
    _colors.add( gold );
    _colors.add( green );
    _colors.add( silver );
    _colors.add( lavender );
    chart1 = new PieChart(
		    Main.this, true, 510.0, 290.0, 
			380.0, 310.0,
            null, null,
            60.0, 10.0,
			260.0, 240.0, null, black,
            40.0, Chart.SOUTH,
            _items, _titles, _colors );

    }
    voters_presentation = new ShapeAgentPopulationGroup(this, SHAPE_DRAW_2D3D, true, voters) {
    
      @Override
      public ShapeEmbeddedObjectPresentation createShapeWithStaticProperties_xjal( final Agent _a, int index ) {
        ShapeEmbeddedObjectPresentation _e = _voters_presentation_createShapeWithStaticProperties_xjal( _a, index );
        return _e;
      }
    };
  }

  @AnyLogicInternalCodegenAPI
  private void _createPersistentElementsBS0_xjal() {
  }


  // Static initialization of persistent elements
  private void instantiatePersistentElements_xjal() {
    level = new com.anylogic.engine.markup.Level(this, "level", SHAPE_DRAW_2D3D, 0.0, true, true);  			
	_getLevels_xjal = new com.anylogic.engine.markup.Level[] { 
      level };
    _createPersistentElementsBP0_xjal();
  }
  protected ShapeTopLevelPresentationGroup presentation;
  protected ShapeModelElementsGroup icon; 

  @Override
  @AnyLogicInternalCodegenAPI
  public ShapeTopLevelPresentationGroup getPresentationShape() {
    return presentation;
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public ShapeModelElementsGroup getModelElementsShape() {
    return icon;
  }

	


  /**
   * Constructor
   */
  public Main( Engine engine, Agent owner, AgentList<? extends Main> ownerPopulation ) {
    super( engine, owner, ownerPopulation );
    instantiateBaseStructureThis_xjal();
  }

  @AnyLogicInternalCodegenAPI
  public void onOwnerChanged_xjal() {
    super.onOwnerChanged_xjal();
    setupReferences_xjal();
  }

  @AnyLogicInternalCodegenAPI
  public void instantiateBaseStructure_xjal() {
    super.instantiateBaseStructure_xjal();
    instantiateBaseStructureThis_xjal();
  }
  
  @AnyLogicInternalCodegenAPI
  private void instantiateBaseStructureThis_xjal() {
	instantiatePersistentElements_xjal();
    setupReferences_xjal();
  }
  
  @AnyLogicInternalCodegenAPI
  private void setupReferences_xjal() {
  }
  
  /**
   * Simple constructor. Please add created agent to some population by calling goToPopulation() function
   */
  public Main() {
  }
  
  /**
   * Simple constructor. Please add created agent to some population by calling goToPopulation() function
   */
  public Main( int MaxWaitingTime, double MaxDeliveryTime ) {
    markParametersAreSet();
    this.MaxWaitingTime = MaxWaitingTime;
    this.MaxDeliveryTime = MaxDeliveryTime;
  }
  
  /**
   * Creating embedded object instances
   */
  @AnyLogicInternalCodegenAPI
  private void instantiatePopulations_xjal() {
    {
      int _cnt = 
1000 
;
      for ( int i = voters.size(); i < _cnt; i++ ) {
        instantiate_voters_xjal( i );
      }
    }
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public void doCreate() {
    super.doCreate();
    // Creating embedded object instances
    instantiatePopulations_xjal();
    // Assigning initial values for plain variables
    setupPlainVariables_Main_xjal();
    // Dynamic initialization of persistent elements
    _createPersistentElementsAP0_xjal();
	_initialize_level_xjal();
    level.initialize();
    presentation = new ShapeTopLevelPresentationGroup( Main.this, true, 0, 0, 0, 0 , level, voters_presentation );
    // Creating embedded object instances
    instantiatePopulations_xjal();
    icon = new ShapeModelElementsGroup( Main.this, getElementProperty( "marketing.Main.icon", IElementDescriptor.MODEL_ELEMENT_DESCRIPTORS )  );
    icon.setIconOffsets( 0.0, 0.0 );
    // Environments setup
    {
      double _x_xjal = 
500 
;
      double _y_xjal = 
500 
;
      double _z_xjal = 
0 
;
      setupSpace( _x_xjal, _y_xjal, _z_xjal );
    }
    disableSteps();
    setNetworkUserDefined();
    setLayoutType( LAYOUT_RANDOM );
	 // Port connectors with non-replicated objects
    // Creating replicated embedded objects
    voters.setEnvironment( this );
    for ( int i = 0; i < voters.size(); i++ ) {
      DAOVoter _a = voters.get(i); 
      setupParameters_voters_xjal( _a, i, null );
      doBeforeCreate_voters_xjal( _a, i, null );
      _a.createAsEmbedded();
    }
    setupInitialConditions_xjal( Main.class );
    // Dynamic initialization of persistent elements
    _createPersistentElementsBS0_xjal();
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public void doStart() {
    super.doStart();
    _chart_autoUpdateEvent_xjal.start();
    _chart1_autoUpdateEvent_xjal.start();
    applyLayout();
    for (Agent embeddedObject : voters) {
      embeddedObject.startAsEmbedded();
    }
  }
 

  /**
   * Assigning initial values for plain variables<br>
   * <em>This method isn't designed to be called by user and may be removed in future releases.</em>
   */
  @AnyLogicInternalCodegenAPI
  public void setupPlainVariables_xjal() {
    setupPlainVariables_Main_xjal();
  }

  /**
   * Assigning initial values for plain variables<br>
   * <em>This method isn't designed to be called by user and may be removed in future releases.</em>
   */
  @AnyLogicInternalCodegenAPI
  private void setupPlainVariables_Main_xjal() {
  }

  // User API -----------------------------------------------------
  @AnyLogicInternalCodegenAPI
  public static LinkToAgentAnimationSettings _connections_commonAnimationSettings_xjal = new LinkToAgentAnimationSettingsImpl( false, black, 1.0, LINE_STYLE_SOLID, ARROW_NONE, 0.0 );

  public LinkToAgentCollection<Agent, Agent> connections = new LinkToAgentStandardImpl<Agent, Agent>(this, _connections_commonAnimationSettings_xjal);
  @Override
  public LinkToAgentCollection<? extends Agent, ? extends Agent> getLinkToAgentStandard_xjal() {
    return connections;
  }


  @AnyLogicInternalCodegenAPI
  public void drawLinksToAgents(boolean _underAgents_xjal, LinkToAgentAnimator _animator_xjal) {
    super.drawLinksToAgents(_underAgents_xjal, _animator_xjal);
    if ( _underAgents_xjal ) {
      _animator_xjal.drawLink( this, connections, true, true );
    }
  }

  public List<Object> getEmbeddedObjects() {
    List<Object> list = super.getEmbeddedObjects();
    if (list == null) {
      list = new LinkedList<Object>();
    }
    list.add( voters );
    return list;
  }

  public AgentList<? extends Main> getPopulation() {
    return (AgentList<? extends Main>) super.getPopulation();
  }

  public List<? extends Main> agentsInRange( double distance ) {
    return (List<? extends Main>) super.agentsInRange( distance );
  }

  @Override
  @AnyLogicInternalCodegenAPI
  public boolean isLoggingToDB(EventOriginator _e) {
    if ( _e == _chart_autoUpdateEvent_xjal ) return false;
    if ( _e == _chart1_autoUpdateEvent_xjal ) return false;
    return super.isLoggingToDB( _e );
  }

  @AnyLogicInternalCodegenAPI
  public void onDestroy() {
    _chart_autoUpdateEvent_xjal.onDestroy();
    _chart1_autoUpdateEvent_xjal.onDestroy();
    for (Agent _item : voters) {
      _item.onDestroy();
    }
    _chart_expression0_dataSet_xjal.destroyUpdater_xjal();
    _chart_expression1_dataSet_xjal.destroyUpdater_xjal();
    _chart_expression2_dataSet_xjal.destroyUpdater_xjal();
    _chart_expression3_dataSet_xjal.destroyUpdater_xjal();
    _chart_expression4_dataSet_xjal.destroyUpdater_xjal();
    logToDB( _chart_expression0_dataSet_xjal, "chart : Voted Yes" );
    logToDB( _chart_expression1_dataSet_xjal, "chart : Deciding to Vote" );
    logToDB( _chart_expression2_dataSet_xjal, "chart : NotVoted" );
    logToDB( _chart_expression3_dataSet_xjal, "chart : Voted No" );
    logToDB( _chart_expression4_dataSet_xjal, "chart : Member" );
    super.onDestroy();
  }

  @AnyLogicInternalCodegenAPI
  @Override
  public void doFinish() {
    super.doFinish();
    for (Agent _item : voters) {
      _item.doFinish();
    }
  }



}
